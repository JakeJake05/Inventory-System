@model ItemListViewModel
@{
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
    var CurrentUsername = ViewBag.Username as string;
    var CurrentUserid = ViewBag.UserId as int?;
    var message = ViewBag.SuccessMessage as string;
    var currentPage = Model.CurrentPage; // Store the current page number for use in JavaScript
    var totalPages = Model.TotalPages; // Store total pages for use in JavaScript
}

<script>
    var currentUsername = '@Html.Raw(CurrentUsername)';

    // Check username in session storage
    const storedUsername = sessionStorage.getItem('currentUsername');
    if (!storedUsername) {
        if (currentUsername) {
            sessionStorage.setItem('currentUsername', currentUsername);
        } else {
            console.log('Username is not available.');
        }
    }

    function delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    document.addEventListener('DOMContentLoaded', async function () {
        var PromptMsg = document.getElementById('prompt-message');
        var message = '@Html.Raw(message)'.trim();
        if (message.trim() !== '') {
            PromptMsg.textContent = message;
        }
        if (PromptMsg) {
            await delay(2000);
            PromptMsg.style.display = 'none';
        }
    });

    var currentPage = @currentPage;  // Current page number
    var totalPages = @totalPages;    // Total number of pages

    // Update pagination buttons and links
    function updatePagination() {
        // Update "Previous" button
        if (currentPage <= 1) {
            $('.pagination .prev').addClass('disabled').attr('href', '#').off('click');
        } else {
            $('.pagination .prev').removeClass('disabled').attr('href', '#').on('click', function (e) {
                e.preventDefault();
                loadItems(currentPage - 1);
            });
        }

        // Update "Next" button
        if (currentPage >= totalPages) {
            $('.pagination .next').addClass('disabled').attr('href', '#').off('click');
        } else {
            $('.pagination .next').removeClass('disabled').attr('href', '#').on('click', function (e) {
                e.preventDefault();
                loadItems(currentPage + 1);
            });
        }

        // Highlight the current page
        $('.pagination a').removeClass('active');
        $('.pagination a').each(function () {
            var href = $(this).attr('href');
            var page = new URLSearchParams(href.split('?')[1]).get('page');
            if (parseInt(page) === currentPage) {
                $(this).addClass('active');
            }
        });
    }

    // Load items for the specified page
    function loadItems(page) {
        $.ajax({
            url: '@Url.Action("ItemTable", "Users")',
            data: { page: page },
            success: function (data) {
                $('#view-all').html(data);
                currentPage = page;  // Update currentPage
                updatePagination();
            },
            error: function (xhr) {
                console.error(xhr);
            }
        });
    }





    $(document).ready(function () {
        // Initialize pagination on page load
        updatePagination();

        // Handle pagination clicks
        $(document).on('click', '.pagination a:not(.disabled)', function (e) {
            e.preventDefault();
            var href = $(this).attr('href');
            var page = new URLSearchParams(href.split('?')[1]).get('page');
            if (page) {
                loadItems(parseInt(page));
            }
        });
    });
</script>

<div id="user-dashboard" style="width:100%; height:100%;" class="bg-info">
    <!-- Sidebar Navigation -->
    <nav class="navbar p-2 bg-dark border border-top-0 border-3 border-start-0 border-end-0 rounded me-3" style="width: 200px; height:100vh;">
        <h3 class="text-success">Dashboard</h3>
    </nav>

    <!-- Data Container -->
    <div id="data-container">
        <!-- Upper part of data container with buttons -->
        <div class="d-flex flex-column flex-md-row justify-content-between mb-2">
            <div>
                <!-- Add Item Button (already in the navbar) -->
            </div>
            <div class="btn-container">
                <a onclick="ShowModal('@Url.Action("AddItem", "Users", null)')" class="btn btn-common btn-success btn-sm">
                    <!--a onclick="ShowModal('Url.Action("AddItem", "Users", null, Context.Request.Scheme)')" class="btn btn-common btn-success btn-sm"-->
                    New Item
                    <!--a-->
                </a>
                <button class="btn btn-common btn-danger btn-sm" onclick="LogoutRequest('@CurrentUserid', '@CurrentUsername');">
                    Logout
                </button>
            </div>
        </div>

        <!-- Data Content -->
        <div id="view-all">
            @await Html.PartialAsync("ItemTable", Model)
        </div>

        <!-- Pagination -->
        @if (Model.TotalPages > 1)
        {
            <div class="pagination">
                @if (Model.CurrentPage > 1)
                {
                    <a href="@Url.Action("ItemTable", new { page = Model.CurrentPage - 1 })" class="prev">Previous</a>
                }
                else
                {
                    <a href="#" class="prev disabled">Previous</a>
                }

                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <a href="@Url.Action("ItemTable", new { page = i })" class="@(Model.CurrentPage == i ? "active" : "")">@i</a>
                }

                @if (Model.CurrentPage < Model.TotalPages)
                {
                    <a href="@Url.Action("ItemTable", new { page = Model.CurrentPage + 1 })" class="next">Next</a>
                }
                else
                {
                    <a href="#" class="next disabled">Next</a>
                }
            </div>
        }
    </div>
</div>

@section Scripts { }
