@using InventorySystem.Models.Pagination
@model ItemListViewModel
@using System.Security.Claims;

@{
    ViewData["Title"] = "Items View";
    //Layout = null;
    int count = 0; // Initialize a counter to track the number of items rendered
    var CurrentUsername = ViewBag.Username as string;
    var CurrentUserid = ViewBag.UserId as int?;
    var message = ViewBag.SuccessMessage as string;
    var currentPage = Model.CurrentPage; // Store the current page number for use in JavaScript
    var totalPages = Model.TotalPages; // Store total pages for use in JavaScript
    var pageSize = ViewBag.PageSize;
    var userIdClaim = User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
    var storedClaim = int.Parse(userIdClaim!);

    <!--Page Number Button -->
    // Define range for the pagination buttons to display around the current page
    int startPage = Math.Max(1, Model.CurrentPage - 2); // Start 2 pages before current page
    int endPage = Math.Min(Model.TotalPages, Model.CurrentPage + 2); // End 2 pages after current page

    // Ensure 5 page buttons at most
    if (endPage - startPage + 1 < 5)
    {
        // Adjust startPage or endPage to maintain 5 buttons, as long as we're within bounds
        if (startPage > 1)
            startPage = Math.Max(1, endPage - 4);
        else if (endPage < Model.TotalPages)
            endPage = Math.Min(Model.TotalPages, startPage + 4);
    }
}

<script>

    var pagesize = '@Html.Raw(pageSize)';
    var currentPage = '@Html.Raw(currentPage)';
    var totalPages = '@Html.Raw(totalPages)';  
    var pageItem = $('.pagination .page-item');

    function handlePaginationUpdate() {
        // handles item overflow due to pagination
        // Reload the item list for the current page to include the new item
        $.ajax({
            type: 'GET',
            url: '@Url.Action("ItemView", "Users", new { username = ViewBag.Username, page = currentPage + 1 })', // Load the next page
            success: function (response) {
                $('#view-all .card-container').html(response); // Update the current items with new data
                currentPage += 1; // Increment the page number
                showSuccessMessage('New page loaded with added item.');
            }
        });
    }


    function showSuccessMessage(message) {
        var successMessage = $('<div class="alert alert-success" role="alert"></div>').text(message);
        $('body').prepend(successMessage);
        successMessage.hide().fadeIn(500).delay(2000).fadeOut(500, function () {
            $(this).remove();
        });
    }

    function loadPage(pageNumber) {
        var itemcode = $('#searchbar').val();
        $.ajax({
            //url: 'Url.Action("ItemView", "Users", new { username = ViewBag.Username })' + '?page=' + pageNumber,
            url: 'dashboard/item-view',
            type: 'GET',
            data: {page: pageNumber },
            success: function (response) {
                $('#view-all').html(response);  
                updatePaginationControls(response);
            },
            error: function (error) {
                console.log("Error loading page: ", error);
            }
        });
    }

    //$('#items-page').text('Items Page: ' + currentPage);

   
</script>

<style>
    .page-button{
        width: 4rem;
        text-align: center;     
    }

    .page-link{
        border-radius: 4px;
    }
</style>

<div class="card-container mt-3 mb-4 border-top border-warning p-2">
    @if (Model.Items == null || !Model.Items.Any())
    {
        <script>
            $('.card-container').addClass('d-flex justify-content-center align-items-center h-auto');
        </script>
        <div class="no-items text-center">
            <p class="text-center">No items found.</p>
        </div>
    }
    else
    {
        <script>
            $('.card-container').removeClass('d-flex justify-content-center align-items-center h-auto');
        </script>
        @foreach (var item in Model.Items)
        {
            if (count >= 24) break; // Stop rendering cards after # items
            @await Html.PartialAsync("ItemCard", item)

            count++; // Increment the counter after rendering each item
        }
        <!-- Pagination Controls -->     
    }

</div>

<nav aria-label="Page navigation" class="mt-5">
   
    
        <ul class="pagination pt-3 pagination-sm border">
        @if (Model.Items != null && Model.Items.Any())
        {
            <!-- First and Previous Page Button -->
            @if (Model.CurrentPage == 1)
            {
                <li class="page-item disabled text-muted page-button">
                    <a class="page-link">First</a>
                </li>

                <li class="page-item disabled text-mutedpage-button ms-2">
                    <a class="page-link">Previous</a>
                </li>
            }
            else
            {
                <li class="page-item page-button">
                    <a class="page-link bgc-lsg" href="javascript:void(0);" onclick="loadPage(1)">First</a>
                </li>

                <li class="page-item page-button ms-2">
                    <a class="page-link bgc-lsg" href="javascript:void(0);" onclick="loadPage(@(Model.CurrentPage - 1))">Previous</a>
                </li>
            }

            <!-- Previous Set of Pages Button -->
            @if (startPage > 1)
            {
                <li class="page-item page-button">
                    <a class="page-link" href="javascript:void(0);" onclick="loadPage(@(startPage - 1))">...</a>
                </li>
            }

            @for (var i = startPage; i <= endPage; i++)
            {
                <li class="page-item ms-2 @(i == Model.CurrentPage ? "active" : "")">
                    <a class="page-link" href="javascript:void(0);" onclick="loadPage(@i)">@i</a>
                </li>
            }

            <!-- Next Set of Pages Button -->
            @if (endPage < Model.TotalPages)
            {
                <li class="page-item page-button ms-2">
                    <a class="page-link" href="javascript:void(0);" onclick="loadPage(@(endPage + 1))">...</a>
                </li>
            }

            <!-- Next Page Button -->
            @if (Model.CurrentPage < Model.TotalPages)
            {
                <li class="page-item page-button ms-2">
                    <a class="page-link bgc-lsg" href="javascript:void(0);" onclick="loadPage(@(Model.CurrentPage + 1))">Next</a>
                </li>
            }
            else
            {
                <li class="page-item disabled text-muted page-button ms-2">
                    <span class="page-link">Next</span>
                </li>
            }

            <!-- Last Page Button -->
            @if (Model.CurrentPage == Model.TotalPages)
            {
                <li class="ms-1 page-item disabled text-muted page-button ms-2">
                    <a class="page-link">Last</a>
                </li>
            }
            else
            {
                <li class="page-item page-button ms-2">
                    <a class="page-link bgc-lsg" href="javascript:void(0);" onclick="loadPage(@Model.TotalPages)">Last</a>
                </li>
            }
        }
        </ul>
    
</nav>






